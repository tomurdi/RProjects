# Load necessary library for plotting
library(ggplot2)
# Define parameters
n <- 10
p <- 0.8
# Create a sequence of x values from 0 to n
x_values <- 0:n
# Calculate the PMF using the dbinom function
pmf_values <- dbinom(x_values, size = n, prob = p)
# Create a data frame for plotting
data <- data.frame(x = x_values, pmf = pmf_values)
# Plot the PMF
ggplot(data, aes(x = x, y = pmf)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "PMF of Binomial Distribution (n=10, p=0.8)",
x = "Number of Successes",
y = "Probability") +
theme_minimal()
# Sample sizes
sample_sizes <- c(4, 7, 10, 15, 20, 30, 40, 80, 1000)
# Set seed for reproducibility
set.seed(42)
# Generate random samples and plot histograms for each sample size
par(mfrow = c(3, 3))  # Set the layout of the plots
for (i in 1:length(sample_sizes)) {
sample_size <- sample_sizes[i]
sample <- rnorm(sample_size)  # Generating random samples from a normal distribution
hist(sample, main = paste("Sample Size:", sample_size), xlab = "Value", col = "skyblue", border = "black")
}
# Sample sizes
sample_sizes <- c(4, 7, 10, 15, 20, 30, 40, 80, 1000)
# Set seed for reproducibility
set.seed(42)
# Generate random samples and plot histograms for each sample size
par(mfrow = c(3, 3))  # Set the layout of the plots
for (i in 1:length(sample_sizes)) {
sample_size <- sample_sizes[i]
sample <- rbinom(sample_size, size = 10, prob = 0.8)  # Generating random samples from a Binomial distribution
hist(sample, main = paste("Sample Size:", sample_size), xlab = "Number of Successes", col = "skyblue", border = "black")
}
# Load necessary library for plotting
library(ggplot2)
# Define parameters
alpha <- 4
beta <- 2
# Generate a sequence of x values
x_values <- seq(0, 20, by = 0.1)  # Change the range and granularity as needed
# Calculate the density values using dgamma function
density_values <- dgamma(x_values, shape = alpha, rate = beta)
# Create a data frame for plotting
data <- data.frame(x = x_values, density = density_values)
# Plot the density curve
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "blue", size = 1) +
labs(title = "Density Curve of Gamma Distribution",
x = "x",
y = "Density") +
theme_minimal()
# Load necessary library for plotting
library(ggplot2)
# Define parameters
alpha <- 4
beta <- 2
# Generate a sequence of x values
x_values <- seq(0, 20, by = 0.1)  # Change the range and granularity as needed
# Calculate the density values using dgamma function
density_values <- dgamma(x_values, shape = alpha, rate = beta)
# Create a data frame for plotting
data <- data.frame(x = x_values, density = density_values)
# Plot the density curve
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "blue", linewidth = 1) +
labs(title = "Density Curve of Gamma Distribution",
x = "x",
y = "Density") +
theme_minimal()
# Sample sizes
sample_sizes <- c(4, 7, 10, 15, 20, 30, 40, 80, 1000)
# Set seed for reproducibility
set.seed(42)
# Generate random samples and plot histograms for each sample size
par(mfrow = c(3, 3))  # Set the layout of the plots
for (i in 1:length(sample_sizes)) {
sample_size <- sample_sizes[i]
sample <- rgamma(sample_size, shape = 4, rate = 2)  # Generating random samples from a Gamma distribution
hist(sample, main = paste("Sample Size:", sample_size), xlab = "Value", col = "skyblue", border = "black")
}
# Define the values of the discrete uniform random variable
values <- 1:6
# Calculate the probability mass function (since it's uniform, each value has equal probability)
prob <- rep(1/length(values), length(values))
# Create a data frame for plotting
data <- data.frame(values = values, probability = prob)
# Plot the PMF
library(ggplot2)
ggplot(data, aes(x = as.factor(values), y = probability)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "PMF of Discrete Uniform Distribution",
x = "Values",
y = "Probability") +
theme_minimal() +
scale_x_discrete(labels = as.character(values))
# Define the values of the discrete random variable
values <- 1:6
# Function to generate a random sample from a discrete uniform distribution
disc_samp <- function(n) {
sample(values, size = n, replace = TRUE)
}
# Example usage:
# Generate a random sample of size 10
sample_result <- disc_samp(10)
print(sample_result)
# Define the values of the discrete random variable
values <- 1:6
# Function to generate a random sample from a discrete uniform distribution
disc_samp <- function(n) {
sample(values, size = n, replace = TRUE)
}
# Example usage:
# Generate a random sample of size 10
sample_result <- disc_samp(10)
print(sample_result)
# Define the values of the discrete random variable
values <- 1:6
# Function to generate a random sample from a discrete uniform distribution
disc_samp <- function(n) {
sample(values, size = n, replace = TRUE)
}
# Example usage:
# Generate a random sample of size 10
sample_result <- disc_samp(10)
print(sample_result)
# Define the values of the discrete random variable
values <- 1:6
# Function to generate a random sample from a discrete uniform distribution
disc_samp <- function(n) {
sample(values, size = n, replace = TRUE)
}
# Example usage:
# Generate a random sample of size 15
sample_result <- disc_samp(15)
print(sample_result)
# Define the function to generate the sample maximum
sample_max <- function(n) {
max(disc_samp(n))
}
# Sample sizes
sample_sizes <- c(1, 2, 3, 4, 5, 15)
# Set seed for reproducibility
set.seed(42)
# Generate the sampling distribution of sample maxima and plot histograms
par(mfrow = c(2, 3))  # Set the layout of the plots
for (size in sample_sizes) {
max_samples <- replicate(1000, sample_max(size))  # Generating 1000 samples
hist(max_samples, main = paste("Sample Size:", size),
xlab = "Maximum Value", col = "skyblue", border = "black")
}
# Define the function to generate the sample maximum
sample_max <- function(n) {
max(disc_samp(n))
}
# Sample sizes
sample_sizes <- c(1, 2, 3, 4, 5, 15)
# Set seed for reproducibility
# Generate the sampling distribution of sample maxima and plot histograms
par(mfrow = c(2, 3))  # Set the layout of the plots
for (size in sample_sizes) {
max_samples <- replicate(1000, sample_max(size))  # Generating 1000 samples
hist(max_samples, main = paste("Sample Size:", size),
xlab = "Maximum Value", col = "skyblue", border = "black")
}
# Define the function to generate the sample maximum
sample_max <- function(n) {
max(disc_samp(n))
}
# Sample sizes
sample_sizes <- c(1, 2, 3, 4, 5, 15)
# Set seed for reproducibility
set.seed(42)
# Generate the sampling distribution of sample maxima and plot histograms
par(mfrow = c(2, 3))  # Set the layout of the plots
for (size in sample_sizes) {
max_samples <- replicate(1000, sample_max(size))  # Generating 1000 samples
hist(max_samples, main = paste("Sample Size:", size),
xlab = "Maximum Value", col = "skyblue", border = "black")
}
# Sample sizes
sample_sizes <- c(4, 7, 10, 15, 20, 30, 40, 80, 1000)
# Generate random samples and plot histograms for each sample size
par(mfrow = c(3, 3))  # Set the layout of the plots
for (i in 1:length(sample_sizes)) {
sample_size <- sample_sizes[i]
sample <- rbinom(sample_size, size = 10, prob = 0.8)  # Generating random samples from a Binomial distribution
hist(sample, main = paste("Sample Size:", sample_size), xlab = "Number of Successes", col = "skyblue", border = "black")
}
# Load necessary library for plotting
library(ggplot2)
# Define parameters
n <- 10
p <- 0.8
# Create a sequence of x values from 0 to n
x_values <- 0:n
# Calculate the PMF using the dbinom function
pmf_values <- dbinom(x_values, size = n, prob = p)
# Create a data frame for plotting
data <- data.frame(x = x_values, pmf = pmf_values)
# Plot the PMF
ggplot(data, aes(x = x, y = pmf)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "PMF of Binomial Distribution (n=10, p=0.8)",
x = "Number of Successes",
y = "Probability") +
theme_minimal()
# Sample sizes
sample_sizes <- c(4, 7, 10, 15, 20, 30, 40, 80, 1000)
# Generate random samples and plot histograms for each sample size
par(mfrow = c(3, 3))  # Set the layout of the plots
for (i in 1:length(sample_sizes)) {
sample_size <- sample_sizes[i]
sample <- rbinom(sample_size, size = 10, prob = 0.8)  # Generating random samples from a Binomial distribution
hist(sample, main = paste("Sample Size:", sample_size), xlab = "Number of Successes", col = "skyblue", border = "black")
}
# Load necessary library for plotting
library(ggplot2)
# Define parameters
alpha <- 4
beta <- 2
# Generate a sequence of x values
x_values <- seq(0, 20, by = 0.1)  # Change the range and granularity as needed
# Calculate the density values using dgamma function
density_values <- dgamma(x_values, shape = alpha, rate = beta)
# Create a data frame for plotting
data <- data.frame(x = x_values, density = density_values)
# Plot the density curve
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "blue", linewidth = 1) +
labs(title = "Density Curve of Gamma Distribution",
x = "x",
y = "Density") +
theme_minimal()
# Sample sizes
sample_sizes <- c(4, 7, 10, 15, 20, 30, 40, 80, 1000)
# Generate random samples and plot histograms for each sample size
par(mfrow = c(3, 3))  # Set the layout of the plots
for (i in 1:length(sample_sizes)) {
sample_size <- sample_sizes[i]
sample <- rgamma(sample_size, shape = 4, rate = 2)  # Generating random samples from a Gamma distribution
hist(sample, main = paste("Sample Size:", sample_size), xlab = "Value", col = "skyblue", border = "black")
}
# Define the values of the discrete uniform random variable
values <- 1:6
# Calculate the probability mass function (since it's uniform, each value has equal probability)
prob <- rep(1/length(values), length(values))
# Create a data frame for plotting
data <- data.frame(values = values, probability = prob)
# Plot the PMF
library(ggplot2)
ggplot(data, aes(x = as.factor(values), y = probability)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "PMF of Discrete Uniform Distribution",
x = "Values",
y = "Probability") +
theme_minimal() +
scale_x_discrete(labels = as.character(values))
# Define the values of the discrete random variable
values <- 1:6
# Function to generate a random sample from a discrete uniform distribution
disc_samp <- function(n) {
sample(values, size = n, replace = TRUE)
}
# Define the function to generate the sample maximum
sample_max <- function(n) {
max(disc_samp(n))
}
# Sample sizes
sample_sizes <- c(1, 2, 3, 4, 5, 15)
# Generate the sampling distribution of sample maxima and plot histograms
par(mfrow = c(2, 3))  # Set the layout of the plots
for (size in sample_sizes) {
max_samples <- replicate(1000, sample_max(size))  # Generating 1000 samples
hist(max_samples, main = paste("Sample Size:", size),
xlab = "Maximum Value", col = "skyblue", border = "black")
}
# Define the values of the discrete random variable
values <- 1:6
# Define probabilities for each value
probabilities <- c(0.5, 0.1, 0.1, 0.1, 0.1, 0.1)
# Create a data frame for plotting
data <- data.frame(values = values, probability = probabilities)
# Plot the PMF
library(ggplot2)
ggplot(data, aes(x = as.factor(values), y = probability)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "PMF of Discrete Distribution",
x = "Values",
y = "Probability") +
theme_minimal() +
scale_x_discrete(labels = as.character(values))
# Define the function to generate the sample maximum
sample_max <- function(n) {
max(disc_samp_1(n))
}
# Sample sizes
sample_sizes <- c(1, 2, 3, 4, 5, 15)
# Set seed for reproducibility
set.seed(42)
# Generate the sampling distribution of sample maxima and plot histograms
par(mfrow = c(2, 3))  # Set the layout of the plots
for (size in sample_sizes) {
max_samples <- replicate(1000, sample_max(size))  # Generating 1000 samples
hist(max_samples, main = paste("Sample Size:", size),
xlab = "Maximum Value", col = "skyblue", border = "black")
}
# Define the values of the discrete random variable
values <- 1:6
# Define probabilities for each value
probabilities <- c(0.5, 0.1, 0.1, 0.1, 0.1, 0.1)
# Function to generate a random sample from the given discrete distribution
disc_samp_1 <- function(n) {
sample(values, size = n, replace = TRUE, prob = probabilities)
}
# Define the function to generate the sample maximum
sample_max <- function(n) {
max(disc_samp_1(n))
}
# Sample sizes
sample_sizes <- c(1, 2, 3, 4, 5, 15)
# Set seed for reproducibility
set.seed(42)
# Generate the sampling distribution of sample maxima and plot histograms
par(mfrow = c(2, 3))  # Set the layout of the plots
for (size in sample_sizes) {
max_samples <- replicate(1000, sample_max(size))  # Generating 1000 samples
hist(max_samples, main = paste("Sample Size:", size),
xlab = "Maximum Value", col = "skyblue", border = "black")
}
