count <- count + 1
}
return(count)
}
count_tails_until_head()
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
count_tails_until_head()
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
count_tails_until_head()
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
count_tails_until_head()
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count <- 0
while (sample(c("T", "H"), 1) == "T") {
count <- count + 1
}
return(count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head() <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head() <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_second_head() <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 1) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_second_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_second_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
tails_count <- 0
while (TRUE) {
# Simulate a coin flip (0 for tails, 1 for heads)
coin_flip <- sample(0:1, 1)
tails_count <- tails_count + 1
if (coin_flip == 1) {  # Head
break
}
}
return(tails_count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_head <- function() {
tails_count <- 0
while (TRUE) {
# Simulate a coin flip (0 for tails, 1 for heads)
coin_flip <- sample(0:1, 1)
tails_count <- tails_count + 1
if (coin_flip == 1) {  # Head
break
}
}
return(tails_count)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 2) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_second_head()
}
expected_val <- mean(results)
expected_val
count_tails_until_second_head <- function() {
count_tails <- 0
head_count <- 0
while (head_count < 3) {
# Simulate a coin flip (0 for tails, 1 for heads)
flip <- sample(0:1, 1)
if (flip == 1) {
head_count <- head_count + 1
}
count_tails <- count_tails + 1
}
return(count_tails)
}
num_simulations <- 10000
# Vector to store the results
results <- numeric(num_simulations)
# Run the simulations
for (i in 1:num_simulations) {
results[i] <- count_tails_until_second_head()
}
expected_val <- mean(results)
expected_val
